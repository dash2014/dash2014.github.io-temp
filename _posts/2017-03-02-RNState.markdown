---
layout: post
title:  "ReactNative State管理的粗见"
subtitle: ""
date:   2017-03-02 17:34:01
categories: [tech]
---

> **React Native**页面渲染主要依赖于*state*的变化，如何维护*state*保证页面逻辑性及可读性更强，我简单的说一下一般的逻辑和**Redux**的思想。

## 组件思想

什么是组件思想，和模块化有什么共通和区别，我的解释是：
*  模块和组件一样封装了某些职责
*  模块暴露出来的接口可能较多也比较宽泛，而组件则指定有限的接口
*  模块主要根据业务做功能拆分封装，组件则主要强调功能的复用

## State

在ReactNative中，组件的思想贯穿于整个设计，你可以把每一个页面看成一个组件，组件的布局和样式写好之后，通过props和state来控制这个页面的状态，其中props通常为父级传递过来的属性，state则用来指示本页面中各种状态的变化。

### 初始化state

state需要在ReactNative页面的初始构造函数中配置，具体写法如下：
```javascript
constructor(props) {
    super(props);
    this.state = {shouldDisplay:true};
  }
```

###读取和更改state

* **读取state**，ReactNative中读取state直接使用*this.state.shouldDisplay*即可
* **更改state**，需要调用*this.setState({shouldDisplay:false})*，即可完成state的更改

##state管理方式

### 常规管理

能想到的目前可以进行state的管理方式
* 不同页面之间直接传递
* 将不同状态存储进数据库或者写文件，用的时候直接从数据库进行读取或者更改
* 代码设置全局state并引用定义的js文件

从这几种管理方式我们可以简单的看到state存储的局限主要提现以下几类情况。

### state管理的局限

 我呈现几个场景简单的描述一下
 * **局部状态反复传递：**
	 * 场景：类似商品详情到支付，当支付完成时候页面样式更改，当支付完成的时候需要将状态从待支付改成支付。此时支付状态的传递，需要从商品详情传递到支付完成，又从支付完成传递回商品详情
	 * 痛点：不同页面之间反复传递属性，就会导致在页面很多处存在setState方法调用，导致state管理混乱
 * **全局状态控制：**
	 * 场景： 登陆状态的获取和维护，很多页面都需要实时获取并登陆的状态信息，那不可能在各个页面中做状态的传递
	 * 痛点：需要一个地方来管理全局性状态，方便各页面直接存取和更改
 * **页面状态来源不统一：**
	 * 场景：个人信息页面，部分状态来源于上层界面传入，部分状态来源于网络请求获取，如果两种状态存在重叠，就会导致不同时刻的状态不明确 
	 * 痛点：不要在页面到处调用setState，尤其在存在异步或者很多业务逻辑代码的时候，会导致页面不具有可读性和可维护性

##Redux来管理state

### Redux设计思想

针对上述提出的问题，redux方案提供了一个思路，它提供了一个store对象用来维护和管理所有页面的state

### Redux实现流程

* 用户发出Action，Action是一个对象，类似于iOS里面的Notification
* 用户增加MiddleWare用于做其他操作，比如打log等对状态和流程无侵入的操作
* Store自动调用Reducer，接收当前的State和Action，返回新的State
* State发生变化之后Store调用监听函数，触发重新渲染View
![ |center | 400X400](http://7xsw5d.com1.z0.glb.clouddn.com/137.pic.jpg)

整体来看，Redux解决了state反复传递和过于分散的问题，并且提供了一种很好的状态和组件分类的思路，middleWare思想灵活且内聚，但有先进性一定有潜在的问题，先说明我的几点考虑Redux的问题，思考一下~
* Redux提供单一store，其采用了单一状态树的结构来存储状态，如果业务特别大，特别是结构复杂的体系会不会有什么瓶颈或者问题（仅仅是考虑）
* 对Redux框架的理解，包括Action和State的设计理解都会不同，对架构要求极高
* Redux属于函数式编程，与面向对象编程有较大不同，理解稍有难度
* 对于简单应用，redux框架略重，需要引入redux，redux-thunk，react-redux，redux-promise等库或者Middleware，增大体量


PS：最近在调研并基于ReactNative使用Redux，碰到了一个问题，工程中同时引用Redux和Realm存在冲突，以上是最近的一点浅知漏识，总结一下

**任何技术有其优点必有其局限，保持观望，保持学习**

