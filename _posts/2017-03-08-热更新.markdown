---
layout: post
title:  "苹果禁止热更新之浅识"
subtitle: ""
date:   2017-03-08 17:34:01
categories: [tech]
---

> 苹果禁止热更新，朋友圈，论坛，开发群集体炸裂，记录一下我的想法，哀悼且喜闻乐见

## 热更新

热更新的出现，最早是因为苹果上架周期时间长，进而导致市场上长期存在带有bug的App版本，于是大家想采取某种方式绕过审核，使得用户可以快速动态更新App，最优秀的代表就是**JSPatch**。

热更新本质上是使得用户拥有更好的体验，跨平台也是为公司节约开发成本，因此越来越多的框架比如**React Native**，包括**JSPatch**后来自己也加入了整体模块开发，以及滴滴尚未开源的**DynamicCocoa**，这些框架本质上**React Native**和**JSPatch**本质上都是通过将JS代码打成bundle下发到App，之后通过JavaScriptCore进行解析，运行，以达到动态化的目的，而**DynamicCocoa**则更进一步，它基于Clang实现了一个OC到JS的转换，之后再遵循上述步骤，使得iOS开发者只需要撰写OC代码即可，而不必去开发JS，但最终本质都是一样的。当然还有**luaView**。

## 可能存在的问题

苹果一直在强力维护自己的生态，包括设计层面以及代码层面，从沙盒机制到禁止第三方动态库，这样做的一个好处就是苹果的整体框架相对干净，不比android开源导致的各种裁剪，各种版本层出不穷，难于维护。那iOS动态更新导致的问题是什么？

- **安全问题**：动态下载代码，里面可能嵌入各种攻击代码，尽管大多数App都是本本分分，但决定事情性质的往往不在大多数。
- **维护原生开发生态**：技术并没有高低之分，但我认为显然苹果也是为了维持OC和Swift的开发者利益，试想一下如果所有App都采用混合开发，甚至直接JS开发，会导致iOS开发者的式微，从商业利益角度来说，如果所有人都去写JS，写lua，去用VSCode，Sublime，WebStore等等，而不是XCode来开发iOS App，苹果的Swift大计是备受考验的，所以这次也是给了一个警告，原生开发也许会就此逃离被JS支配的恐惧。
- **审核的意义**：苹果的审核周期从过去的一周提升至了目前的一两天，如果通过动态更新可以代替之前的审核流程，那审核存在意义并不大，这也是之前一直存在的问题。

## 动态化之路走向哪

苹果此番表态，是否意味着iOS平台动态化命题的终结？
- **ReactNative，Weex**，基于Web标准的跨平台方案，本质上都是通过前端语言保持Android和iOS一致，开发门槛降低，由于其也支持动态更新，因此会不会被禁止暂时还在观望。
- **JSPatch**，其主要是基于JS动态下发修复bug或者加载功能模块，现在看上去是被禁止掉了
- **DynamicCocoa**，滴滴的待开源库，其采用Native的代码开发，之后基于Clang从OC转成JS，并下发，从实现角度上，原理与JSPatch并没有特别本质的区别，目前看上去应该也是会被禁止掉。
- **手Q的方案，luaView**，手Q目前是下发将代码转换成中间码，luaView是下发lua脚本，用特定的解析器去解析中间码，之后完成动态加载，要知道苹果此次的禁用的目的是为了禁用功能代码动态加载，因此我觉得也会受到影响。

iOS发展了好些年，动态化之路也不过就出现了这么几个优秀的并被广为人知方案，从目前看来原理大同小异，因此个人觉得目前从代码下载绕过审核这个角度上来说动态化之路已经步履维艰。

**任何技术有其优点必有其局限，保持观望，保持学习**

